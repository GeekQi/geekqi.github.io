[{"title":"","url":"https://geekqi.github.io/2017/06/22/baidu_verify_m4cIjhcLJ9/","content":"m4cIjhcLJ9","categories":[],"tags":[]},{"title":"核心技能get！令人发指！","url":"https://geekqi.github.io/2017/05/31/核心技能get！令人发指！/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<hr>\n<blockquote>\n<h3 id=\"核心技能get！令人发指！\"><a href=\"#核心技能get！令人发指！\" class=\"headerlink\" title=\"核心技能get！令人发指！\"></a><strong>核心技能get！令人发指！</strong></h3></blockquote>\n<hr>\n<h3 id=\"A-机器学习／自然语言处理\"><a href=\"#A-机器学习／自然语言处理\" class=\"headerlink\" title=\"A+.机器学习／自然语言处理\"></a><strong>A+.机器学习／自然语言处理</strong></h3><ul>\n<li>10.<a href=\"https://mp.weixin.qq.com/s?__biz=MzI0NTQ1NDc4Nw==&amp;mid=2247485006&amp;idx=1&amp;sn=893130b947fdcf6edf6e0484ef2e444e&amp;chksm=e94f04e2de388df4622d46261de5ae037cb72ffd8bcb1eb353078927441e1cd6c17c5fa33a6c&amp;mpshare=1&amp;scene=1&amp;srcid=0531SOYpN9yTAQM3HICqxZVL&amp;key=a3bdc9d9a0c308569107193f44ecdd92c4610cdef5a073f649d045f6d39e22bf1cac41fb75b2dce656d124301f7afab9c818c440ddd1ad694416bb63a7df46d0e837176101de14faf307a5b2f0041f13&amp;ascene=0&amp;uin=NzE4MDI2NzMz&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.5+build(16F73\" target=\"_blank\" rel=\"external\">用数据解读《欢乐颂2》</a>&amp;version=12020710&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=CyO%2BvJvJJKh3oZAY0Bnvz0B0u3XoCbw7V1Q%2F21AyX72v3L%2FFG2%2Fk8SV%2FYJVIgKz7)</li>\n<li>9.</li>\n<li>​</li>\n</ul>\n<h3 id=\"A-工程项目\"><a href=\"#A-工程项目\" class=\"headerlink\" title=\"A+.工程项目\"></a><strong>A+.工程项目</strong></h3><ul>\n<li>10.</li>\n<li>9.</li>\n</ul>\n<h3 id=\"A-“创业”项目思路\"><a href=\"#A-“创业”项目思路\" class=\"headerlink\" title=\"A++.“创业”项目思路\"></a><strong>A++.“创业”项目思路</strong></h3><ul>\n<li>10.</li>\n<li>9.</li>\n</ul>\n<h3 id=\"A-行业游戏规则\"><a href=\"#A-行业游戏规则\" class=\"headerlink\" title=\"A.行业游戏规则\"></a><strong>A.行业游戏规则</strong></h3><ul>\n<li>10.</li>\n<li>9.</li>\n</ul>\n<hr>\n<blockquote>\n<p>关于基础知识：如下</p>\n</blockquote>\n<hr>\n<h3 id=\"1-刷题\"><a href=\"#1-刷题\" class=\"headerlink\" title=\"1.刷题\"></a>1.刷题</h3><ul>\n<li>目的分析：基础知识的掌握牢固， 「 <strong>基础熟练决定你的灵活性！」</strong></li>\n<li>解决办法：大量做题，<strong>「 不比别人熟练，必败」</strong></li>\n<li>可能方式：<strong><a href=\"https://www.nowcoder.com/7037691\" target=\"_blank\" rel=\"external\">纽克</a>、<a href=\"https://www.julyedu.com\" target=\"_blank\" rel=\"external\">柒越</a></strong></li>\n</ul>\n<h3 id=\"2-简历\"><a href=\"#2-简历\" class=\"headerlink\" title=\"2.简历\"></a>2.简历</h3><ul>\n<li>目的分析：让人接受你的努力， <strong>「 被认可，被膜拜，这是主流！」</strong></li>\n<li>时间节点：<strong>6月底</strong></li>\n</ul>\n<h3 id=\"3-经验\"><a href=\"#3-经验\" class=\"headerlink\" title=\"3.经验\"></a>3.经验</h3><ul>\n<li>目的分析：系统性质的项目过程， <strong>「 灵活的经验才能被主流朝拜！」</strong></li>\n<li>解决办法：<strong>实战</strong>项目、开源项目， <strong>「 片段化不系统，机会抓不住」</strong></li>\n<li>可能方式：<strong><a href=\"http://geek.ai100.com.cn\" target=\"_blank\" rel=\"external\">豪洞悉</a>、<a href=\"http://tinyletter.com/fly51fly/archive\" target=\"_blank\" rel=\"external\">艾科科</a>、工种薅</strong>、<strong>英语</strong></li>\n</ul>\n","categories":["核心技能get！"],"tags":[]},{"title":"python记忆力曲线","url":"https://geekqi.github.io/2017/05/26/python记忆力曲线/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h2 id=\"A-python基础，看看哈\"><a href=\"#A-python基础，看看哈\" class=\"headerlink\" title=\"A.python基础，看看哈\"></a>A.python基础，看看哈</h2><h3 id=\"1-python是什么？\"><a href=\"#1-python是什么？\" class=\"headerlink\" title=\"1.python是什么？\"></a>1.python是什么？</h3><p>语言：<a href=\"http://www.runoob.com/python/python-intro.html\" target=\"_blank\" rel=\"external\">解释型、交互性、面向对象</a></p>\n<h3 id=\"2-python中文编码怎么搞？\"><a href=\"#2-python中文编码怎么搞？\" class=\"headerlink\" title=\"2.python中文编码怎么搞？\"></a>2.python中文编码怎么搞？</h3><p>默认：ASCII。 </p>\n<p>需要：<a href=\"http://www.runoob.com/python/python-chinese-encoding.html\" target=\"_blank\" rel=\"external\">开头加入：# -*- coding:UTF-8 -*-</a></p>\n<h3 id=\"3-python-标识符怎么写？\"><a href=\"#3-python-标识符怎么写？\" class=\"headerlink\" title=\"3.python 标识符怎么写？\"></a>3.python 标识符怎么写？</h3><p>包括：<a href=\"http://www.runoob.com/python/python-basic-syntax.html\" target=\"_blank\" rel=\"external\">字母、数字[<strong>不可开头</strong>]、下划线[单下划线表示不能直接访问类属性、需要类接口访问，不能from XXX import * 导入／双下滑线代表类的私有成员／双下划线开头结尾代表特殊方法专用(_<em>init\\</em>_()代表类的构造函数)]</a></p>\n<h3 id=\"4-python引号用几个？\"><a href=\"#4-python引号用几个？\" class=\"headerlink\" title=\"4.python引号用几个？\"></a>4.python引号用几个？</h3><p>‘           ’／’‘        “／” “ ”        “ ” “ 都行</p>\n<h3 id=\"5-python-注释用什么\"><a href=\"#5-python-注释用什么\" class=\"headerlink\" title=\"5.python 注释用什么?\"></a>5.python 注释用什么?</h3><p>#, ‘ ’ ‘          ‘ ’ ‘ ，” “ ”       ” “ ” 多行</p>\n<h3 id=\"6-python等待用户输入\"><a href=\"#6-python等待用户输入\" class=\"headerlink\" title=\"6.python等待用户输入?\"></a>6.python等待用户输入?</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">raw_input(<span class=\"string\">\"\\n\\nPlease input something:.\"</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"7-python多变量赋值？\"><a href=\"#7-python多变量赋值？\" class=\"headerlink\" title=\"7.python多变量赋值？\"></a>7.python多变量赋值？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a, b, c = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">\"john\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-python-元组能像列表一样更新么？\"><a href=\"#8-python-元组能像列表一样更新么？\" class=\"headerlink\" title=\"8.python 元组能像列表一样更新么？\"></a>8.python 元组能像列表一样更新么？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">tuple = ( <span class=\"string\">'runoob'</span>, <span class=\"number\">786</span> , <span class=\"number\">2.23</span>, <span class=\"string\">'john'</span>, <span class=\"number\">70.2</span> )</div><div class=\"line\">list = [ <span class=\"string\">'runoob'</span>, <span class=\"number\">786</span> , <span class=\"number\">2.23</span>, <span class=\"string\">'john'</span>, <span class=\"number\">70.2</span> ]</div><div class=\"line\">tuple[<span class=\"number\">2</span>] = <span class=\"number\">1000</span>    <span class=\"comment\"># 元组中是非法应用</span></div><div class=\"line\">list[<span class=\"number\">2</span>] = <span class=\"number\">1000</span>     <span class=\"comment\"># 列表中是合法应用</span></div></pre></td></tr></table></figure>\n<h3 id=\"9-python字典创建、赋值、取值、取键，好写不？\"><a href=\"#9-python字典创建、赋值、取值、取键，好写不？\" class=\"headerlink\" title=\"9.python字典创建、赋值、取值、取键，好写不？\"></a>9.python字典创建、赋值、取值、取键，好写不？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">dict = &#123;&#125;</div><div class=\"line\">dict[<span class=\"string\">'one'</span>] = <span class=\"string\">\"This is one\"</span></div><div class=\"line\">dict[<span class=\"number\">2</span>] = <span class=\"string\">\"This is two\"</span></div><div class=\"line\">tinydict = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'john'</span>,<span class=\"string\">'code'</span>:<span class=\"number\">6734</span>, <span class=\"string\">'dept'</span>: <span class=\"string\">'sales'</span>&#125;</div><div class=\"line\"><span class=\"keyword\">print</span> dict[<span class=\"string\">'one'</span>]          <span class=\"comment\"># 输出键为'one' 的值</span></div><div class=\"line\"><span class=\"keyword\">print</span> dict[<span class=\"number\">2</span>]              <span class=\"comment\"># 输出键为 2 的值</span></div><div class=\"line\"><span class=\"keyword\">print</span> tinydict             <span class=\"comment\"># 输出完整的字典</span></div><div class=\"line\"><span class=\"keyword\">print</span> tinydict.keys()      <span class=\"comment\"># 输出所有键</span></div><div class=\"line\"><span class=\"keyword\">print</span> tinydict.values()    <span class=\"comment\"># 输出所有值</span></div></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">This <span class=\"keyword\">is</span> one</div><div class=\"line\">This <span class=\"keyword\">is</span> two</div><div class=\"line\">&#123;<span class=\"string\">'dept'</span>: <span class=\"string\">'sales'</span>, <span class=\"string\">'code'</span>: <span class=\"number\">6734</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'john'</span>&#125;</div><div class=\"line\">[<span class=\"string\">'dept'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'name'</span>]</div><div class=\"line\">[<span class=\"string\">'sales'</span>, <span class=\"number\">6734</span>, <span class=\"string\">'john'</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"10-python-类型转换怎么搞？\"><a href=\"#10-python-类型转换怎么搞？\" class=\"headerlink\" title=\"10.python 类型转换怎么搞？\"></a>10.python 类型转换怎么搞？</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>str(x)</td>\n<td>将对象 x 转换为字符串</td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td>将序列 s 转换为一个元组</td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td>将序列 s 转换为一个列表</td>\n</tr>\n<tr>\n<td>set(s)</td>\n<td>转换为可变集合</td>\n</tr>\n<tr>\n<td>dict(d)</td>\n<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个字符转换为它的整数值</td>\n</tr>\n<tr>\n<td>chr(x)</td>\n<td>将一个整数转换为一个字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"11-python的数据类型怎么查看？\"><a href=\"#11-python的数据类型怎么查看？\" class=\"headerlink\" title=\"11.python的数据类型怎么查看？\"></a>11.python的数据类型怎么查看？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>n=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(n)</div><div class=\"line\">&lt;type <span class=\"string\">'int'</span>&gt;</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">111</span></div><div class=\"line\">isinstance(a, int)</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure>\n<h3 id=\"12-python的位运算符怎么写呢？\"><a href=\"#12-python的位运算符怎么写呢？\" class=\"headerlink\" title=\"12.python的位运算符怎么写呢？\"></a>12.python的位运算符怎么写呢？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">0011</span> <span class=\"number\">1100</span></div><div class=\"line\">b = <span class=\"number\">0000</span> <span class=\"number\">1101</span></div><div class=\"line\">-----------------</div><div class=\"line\">a&amp;b = <span class=\"number\">0000</span> <span class=\"number\">1100</span>  与</div><div class=\"line\">a|b = <span class=\"number\">0011</span> <span class=\"number\">1101</span>  或</div><div class=\"line\">a^b = <span class=\"number\">0011</span> <span class=\"number\">0001</span>  异或</div><div class=\"line\">~a  = <span class=\"number\">1100</span> <span class=\"number\">0011</span>  反</div></pre></td></tr></table></figure>\n<h3 id=\"13-python的逻辑运算符怎么写，不是位、不是算数运算符？\"><a href=\"#13-python的逻辑运算符怎么写，不是位、不是算数运算符？\" class=\"headerlink\" title=\"13.python的逻辑运算符怎么写，不是位、不是算数运算符？\"></a>13.python的逻辑运算符怎么写，不是位、不是算数运算符？</h3><p>a , b= 10, 20</p>\n<table>\n<thead>\n<tr>\n<th>描述</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>布尔”与” ：如果 a 为 False，a and b 返回 False，否则它返回 y 的计算值</td>\n<td>(a and b) 返回 20</td>\n</tr>\n<tr>\n<td>布尔”或”:  如果 a 是非 0，它返回 a 的值，否则它返回 b 的计算值</td>\n<td>(a or b) 返回 10</td>\n</tr>\n<tr>\n<td>布尔”非” : 如果 a 为 True，返回 False 。如果 a 为 False，它返回 True</td>\n<td>not(a and b) 返回 False</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"14-python成员运算符，表示什么意思啊？\"><a href=\"#14-python成员运算符，表示什么意思啊？\" class=\"headerlink\" title=\"14.python成员运算符，表示什么意思啊？\"></a>14.python成员运算符，表示什么意思啊？</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>如果在指定的序列中没有找到值返回 True，否则返回 False</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">a = <span class=\"number\">10</span></div><div class=\"line\">b = <span class=\"number\">20</span></div><div class=\"line\">list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> ];</div><div class=\"line\"><span class=\"keyword\">if</span> ( a <span class=\"keyword\">in</span> list ):</div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">\"变量 a 在给定的列表中 list 中\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"15-python身份运算符，用来做什么呢？\"><a href=\"#15-python身份运算符，用来做什么呢？\" class=\"headerlink\" title=\"15.python身份运算符，用来做什么呢？\"></a>15.python身份运算符，用来做什么呢？</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>is</td>\n<td><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td>is not</td>\n<td><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"16-python的is-和-有啥区别么？\"><a href=\"#16-python的is-和-有啥区别么？\" class=\"headerlink\" title=\"16.python的is 和==有啥区别么？\"></a>16.python的is 和==有啥区别么？</h3><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a </div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a[:]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b <span class=\"keyword\">is</span> a</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b == a</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure>\n<h3 id=\"17-python-if语句立个flag？\"><a href=\"#17-python-if语句立个flag？\" class=\"headerlink\" title=\"17.python if语句立个flag？\"></a>17.python if语句立个flag？</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 例1：if 基本用法</span></div><div class=\"line\">flag = <span class=\"keyword\">False</span></div><div class=\"line\">name = <span class=\"string\">'luren'</span></div><div class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">'python'</span>:         <span class=\"comment\"># 判断变量否为'python'</span></div><div class=\"line\">    flag = <span class=\"keyword\">True</span>          <span class=\"comment\"># 条件成立时设置标志为真</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'welcome boss'</span>    <span class=\"comment\"># 并输出欢迎信息</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> name              <span class=\"comment\"># 条件不成立时输出变量名称</span></div></pre></td></tr></table></figure>\n<p>对了，还有elif用来多个条件判断：可以用or、and。</p>\n<h3 id=\"19-python-while-循环，这个例子不错，还有flag立，竟然用到else\"><a href=\"#19-python-while-循环，这个例子不错，还有flag立，竟然用到else\" class=\"headerlink\" title=\"19.python while 循环，这个例子不错，还有flag立，竟然用到else\"></a>19.python while 循环，这个例子不错，还有flag立，竟然用到else</h3><p>  这个例子用到用了list.pop()</p>\n<p><img src=\"/2017/05/26/python记忆力曲线/loop-over-python-list-animation.gif\" alt=\"loop-over-python-list-animation\"></p>\n<p>还有flag立</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">var = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> var == <span class=\"number\">1</span> :  <span class=\"comment\"># 该条件永远为true，循环将无限执行下去</span></div><div class=\"line\">   num = raw_input(<span class=\"string\">\"Enter a number  :\"</span>)</div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">\"You entered: \"</span>, num</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Good bye!\"</span></div></pre></td></tr></table></figure>\n<p>竟然还有else</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">count = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> count &lt; <span class=\"number\">5</span>:</div><div class=\"line\">   <span class=\"keyword\">print</span> count, <span class=\"string\">\" is  less than 5\"</span></div><div class=\"line\">   count = count + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">   <span class=\"keyword\">print</span> count, <span class=\"string\">\" is not less than 5\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"20-python-for字符串、迭代、else、enumerate遍历、质数打印\"><a href=\"#20-python-for字符串、迭代、else、enumerate遍历、质数打印\" class=\"headerlink\" title=\"20.python for字符串、迭代、else、enumerate遍历、质数打印\"></a>20.python for字符串、迭代、else、enumerate遍历、质数打印</h3><p>字符串打印</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">for</span> letter <span class=\"keyword\">in</span> <span class=\"string\">'Python'</span>:     <span class=\"comment\"># 第一个实例</span></div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'当前字母 :'</span>, letter</div><div class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> fruit <span class=\"keyword\">in</span> fruits:        <span class=\"comment\"># 第二个实例</span></div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'当前水果 :'</span>, fruit</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Good bye!\"</span></div></pre></td></tr></table></figure>\n<p>迭代打印</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">fruits = [<span class=\"string\">'banana'</span>, <span class=\"string\">'apple'</span>,  <span class=\"string\">'mango'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(fruits)):</div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">'当前水果 :'</span>, fruits[index]</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Good bye!\"</span></div></pre></td></tr></table></figure>\n<p>else就是循环执行完之后的操纵。</p>\n<p>enumerate：举个例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index, item <span class=\"keyword\">in</span> enumerate(sequence):</div><div class=\"line\">    process(index, item)</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sequence = [<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">34</span>, <span class=\"number\">23</span>, <span class=\"number\">45</span>, <span class=\"number\">76</span>, <span class=\"number\">89</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> enumerate(sequence):</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> i,j</div><div class=\"line\"><span class=\"number\">0</span> <span class=\"number\">12</span></div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">34</span></div><div class=\"line\"><span class=\"number\">2</span> <span class=\"number\">34</span></div><div class=\"line\"><span class=\"number\">3</span> <span class=\"number\">23</span></div><div class=\"line\"><span class=\"number\">4</span> <span class=\"number\">45</span></div><div class=\"line\"><span class=\"number\">5</span> <span class=\"number\">76</span></div><div class=\"line\"><span class=\"number\">6</span> <span class=\"number\">89</span></div></pre></td></tr></table></figure>\n<p>质数打印：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># 输出 2 到 100 简的质数</span></div><div class=\"line\">prime = []</div><div class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,<span class=\"number\">100</span>):  <span class=\"comment\"># 迭代 2 到 100 之间的数字</span></div><div class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,num): <span class=\"comment\"># 根据因子迭代</span></div><div class=\"line\">      <span class=\"keyword\">if</span> num%i == <span class=\"number\">0</span>:      <span class=\"comment\"># 确定第一个因子</span></div><div class=\"line\">         <span class=\"keyword\">break</span>            <span class=\"comment\"># 跳出当前循环</span></div><div class=\"line\">   <span class=\"keyword\">else</span>:                  <span class=\"comment\"># 循环的 else 部分</span></div><div class=\"line\">      prime.append(num)</div><div class=\"line\"><span class=\"keyword\">print</span> prime</div></pre></td></tr></table></figure>\n<h3 id=\"21-python循环嵌套。。。好复杂的样子？思路-未理解\"><a href=\"#21-python循环嵌套。。。好复杂的样子？思路-未理解\" class=\"headerlink\" title=\"21.python循环嵌套。。。好复杂的样子？思路[未理解]\"></a>21.python循环嵌套。。。好复杂的样子？思路[未理解]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">   <span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</div><div class=\"line\">      statements(s)</div><div class=\"line\">   statements(s)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> expression:</div><div class=\"line\">   <span class=\"keyword\">while</span> expression:</div><div class=\"line\">      statement(s)</div><div class=\"line\">   statement(s)</div></pre></td></tr></table></figure>\n<p>例子：参考20:打印质数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></div><div class=\"line\">i = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">while</span>(i &lt; <span class=\"number\">100</span>):</div><div class=\"line\">   j = <span class=\"number\">2</span></div><div class=\"line\">   <span class=\"keyword\">while</span>(j &lt;= (i/j)):</div><div class=\"line\">      <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(i%j): <span class=\"keyword\">break</span></div><div class=\"line\">      j = j + <span class=\"number\">1</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (j &gt; i/j) : <span class=\"keyword\">print</span> i, <span class=\"string\">\" 是素数\"</span></div><div class=\"line\">   i = i + <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Good bye!\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"21-python的pass：不做事情。。\"><a href=\"#21-python的pass：不做事情。。\" class=\"headerlink\" title=\"21.python的pass：不做事情。。\"></a>21.python的pass：不做事情。。</h3><h3 id=\"22-python的数学函数-基本函数\"><a href=\"#22-python的数学函数-基本函数\" class=\"headerlink\" title=\"22.python的数学函数-基本函数\"></a>22.python的数学函数-基本函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>返回值 ( 描述 )</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-abs.html\" target=\"_blank\" rel=\"external\">abs(x)</a></td>\n<td>返回数字的绝对值，如abs(-10) 返回 10</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-ceil.html\" target=\"_blank\" rel=\"external\">ceil(x) </a></td>\n<td>返回数字的上入整数，如math.ceil(4.1) 返回 5</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-cmp.html\" target=\"_blank\" rel=\"external\">cmp(x, y)</a></td>\n<td>如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-exp.html\" target=\"_blank\" rel=\"external\">exp(x) </a></td>\n<td>返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-fabs.html\" target=\"_blank\" rel=\"external\">fabs(x)</a></td>\n<td>返回数字的绝对值，如math.fabs(-10) 返回10.0</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-floor.html\" target=\"_blank\" rel=\"external\">floor(x) </a></td>\n<td>返回数字的下舍整数，如math.floor(4.9)返回 4</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-log.html\" target=\"_blank\" rel=\"external\">log(x) </a></td>\n<td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-log10.html\" target=\"_blank\" rel=\"external\">log10(x) </a></td>\n<td>返回以10为基数的x的对数，如math.log10(100)返回 2.0</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-max.html\" target=\"_blank\" rel=\"external\">max(x1, x2,…) </a></td>\n<td>返回给定参数的最大值，参数可以为序列。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-min.html\" target=\"_blank\" rel=\"external\">min(x1, x2,…) </a></td>\n<td>返回给定参数的最小值，参数可以为序列。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-modf.html\" target=\"_blank\" rel=\"external\">modf(x) </a></td>\n<td>返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-pow.html\" target=\"_blank\" rel=\"external\">pow(x, y)</a></td>\n<td>x**y 运算后的值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-round.html\" target=\"_blank\" rel=\"external\">round(x [,n])</a></td>\n<td>返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-sqrt.html\" target=\"_blank\" rel=\"external\">sqrt(x) </a></td>\n<td>返回数字x的平方根，数字可以为负数，返回类型为实数，如math.sqrt(4)返回 2+0j</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"23-python随机数函数\"><a href=\"#23-python随机数函数\" class=\"headerlink\" title=\"23.python随机数函数\"></a>23.python随机数函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-choice.html\" target=\"_blank\" rel=\"external\">choice(seq)</a></td>\n<td>从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-randrange.html\" target=\"_blank\" rel=\"external\">randrange ([start,] stop [,step])</a></td>\n<td>从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-random.html\" target=\"_blank\" rel=\"external\">random() </a></td>\n<td>随机生成下一个实数，它在[0,1)范围内。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-seed.html\" target=\"_blank\" rel=\"external\">seed([x]) </a></td>\n<td>改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-shuffle.html\" target=\"_blank\" rel=\"external\">shuffle(lst) </a></td>\n<td>将序列的所有元素随机排序</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-uniform.html\" target=\"_blank\" rel=\"external\">uniform(x, y)</a></td>\n<td>随机生成下一个实数，它在[x,y]范围内。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"24-python三角函数\"><a href=\"#24-python三角函数\" class=\"headerlink\" title=\"24.python三角函数\"></a>24.python三角函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-acos.html\" target=\"_blank\" rel=\"external\">acos(x)</a></td>\n<td>返回x的反余弦弧度值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-asin.html\" target=\"_blank\" rel=\"external\">asin(x)</a></td>\n<td>返回x的反正弦弧度值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-atan.html\" target=\"_blank\" rel=\"external\">atan(x)</a></td>\n<td>返回x的反正切弧度值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-atan2.html\" target=\"_blank\" rel=\"external\">atan2(y, x)</a></td>\n<td>返回给定的 X 及 Y 坐标值的反正切值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-cos.html\" target=\"_blank\" rel=\"external\">cos(x)</a></td>\n<td>返回x的弧度的余弦值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-hypot.html\" target=\"_blank\" rel=\"external\"><strong>hypot(x, y)</strong></a></td>\n<td>返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-sin.html\" target=\"_blank\" rel=\"external\">sin(x)</a></td>\n<td>返回的x弧度的正弦值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-tan.html\" target=\"_blank\" rel=\"external\">tan(x)</a></td>\n<td>返回x弧度的正切值。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-degrees.html\" target=\"_blank\" rel=\"external\">degrees(x)</a></td>\n<td>将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/func-number-radians.html\" target=\"_blank\" rel=\"external\">radians(x)</a></td>\n<td>将角度转换为弧度</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"25-python字符串的一系列操作。。听多，听过\"><a href=\"#25-python字符串的一系列操作。。听多，听过\" class=\"headerlink\" title=\"25.python字符串的一系列操作。。听多，听过\"></a>25.python字符串的一系列操作。。听多，听过</h3><table>\n<thead>\n<tr>\n<th>+</th>\n<th>*</th>\n<th>[]</th>\n<th>[:]</th>\n<th>in</th>\n<th>not in</th>\n<th>%</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>连接</td>\n<td>重复</td>\n<td>索引</td>\n<td>截取</td>\n<td>包涵</td>\n<td>不包含</td>\n<td>格式化</td>\n</tr>\n</tbody>\n</table>\n<p>%格式化：例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"My name is %s and weight is %d kg!\"</span> % (<span class=\"string\">'Zara'</span>, <span class=\"number\">21</span>)</div></pre></td></tr></table></figure>\n<p>三引号：例子：为了避免转移字符繁琐</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> errHTML = <span class=\"string\">'''</span></div><div class=\"line\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</div><div class=\"line\">Friends CGI Demo&lt;/TITLE&gt;&lt;/HEAD&gt;</div><div class=\"line\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</div><div class=\"line\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</div><div class=\"line\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</div><div class=\"line\">ONCLICK=\"window.history.back()\"&gt;&lt;/FORM&gt;</div><div class=\"line\">&lt;/BODY&gt;&lt;/HTML&gt;</div><div class=\"line\">'''</div><div class=\"line\">cursor.execute(<span class=\"string\">'''</span></div><div class=\"line\">CREATE TABLE users (  </div><div class=\"line\">login VARCHAR(8), </div><div class=\"line\">uid INTEGER,</div><div class=\"line\">prid INTEGER)</div><div class=\"line\">''')</div></pre></td></tr></table></figure>\n<p>Unicode字符串</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">u'Hello World !'</span></div><div class=\"line\"><span class=\"string\">u'Hello World !'</span></div></pre></td></tr></table></figure>\n<p>基本函数哈</p>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-capitalize.html\" target=\"_blank\" rel=\"external\">string.capitalize()</a></td>\n<td>把字符串的第一个字符大写</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-count.html\" target=\"_blank\" rel=\"external\">string.count(str, beg=0, end=len(string))</a></td>\n<td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-decode.html\" target=\"_blank\" rel=\"external\">string.decode(encoding=’UTF-8’, errors=’strict’)</a></td>\n<td>以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除 非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-encode.html\" target=\"_blank\" rel=\"external\">string.encode(encoding=’UTF-8’, errors=’strict’)</a></td>\n<td>以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-endswith.html\" target=\"_blank\" rel=\"external\">string.endswith(obj, beg=0, end=len(string))</a></strong></td>\n<td>检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-find.html\" target=\"_blank\" rel=\"external\"><strong>string.find(str, beg=0, end=len(string))</strong></a></td>\n<td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-index.html\" target=\"_blank\" rel=\"external\">string.index(str, beg=0, end=len(string))</a></strong></td>\n<td>跟find()方法一样，只不过如果str不在 string中会报一个异常.</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-isalpha.html\" target=\"_blank\" rel=\"external\">string.isalpha()</a></td>\n<td>如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-isalnum.html\" target=\"_blank\" rel=\"external\">string.isalnum()</a></td>\n<td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-isdigit.html\" target=\"_blank\" rel=\"external\">string.isdigit()</a></td>\n<td>如果 string 只包含数字则返回 True 否则返回 False.</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-islower.html\" target=\"_blank\" rel=\"external\">string.islower()</a></td>\n<td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-join.html\" target=\"_blank\" rel=\"external\">string.join(seq)</a></strong></td>\n<td>以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-lower.html\" target=\"_blank\" rel=\"external\">string.lower()</a></td>\n<td>转换 string 中所有大写字符为小写.</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-lstrip.html\" target=\"_blank\" rel=\"external\">string.lstrip()</a></td>\n<td>截掉 string 左边的空格</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-max.html\" target=\"_blank\" rel=\"external\">max(str)</a></td>\n<td>返回字符串 <em>str</em> 中最大的字母。</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-min.html\" target=\"_blank\" rel=\"external\">min(str)</a></td>\n<td>返回字符串 <em>str</em> 中最小的字母。</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-replace.html\" target=\"_blank\" rel=\"external\">string.replace(str1, str2,  num=string.count(str1))</a></strong></td>\n<td>把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-split.html\" target=\"_blank\" rel=\"external\">string.split(str=””, num=string.count(str))</a></strong></td>\n<td>以 str 为分隔符切片 string，如果 num有指定值，则仅分隔 num 个子字符串</td>\n</tr>\n<tr>\n<td><strong><a href=\"http://www.runoob.com/python/att-string-strip.html\" target=\"_blank\" rel=\"external\">string.strip([obj])</a></strong></td>\n<td>在 string 上执行 lstrip()和 rstrip()</td>\n</tr>\n<tr>\n<td><a href=\"http://www.runoob.com/python/att-string-upper.html\" target=\"_blank\" rel=\"external\">string.upper()</a></td>\n<td>转换 string 中的小写字母为大写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"26-python的list的一系列操作，很多很熟练\"><a href=\"#26-python的list的一系列操作，很多很熟练\" class=\"headerlink\" title=\"26.python的list的一系列操作，很多很熟练\"></a>26.python的list的一系列操作，很多很熟练</h3>","categories":["python记忆力"],"tags":[]},{"title":"生财有道一-某所“项目”.","url":"https://geekqi.github.io/2017/05/22/生财有道一-某所“项目”/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"技术／产品／变现\"><a href=\"#技术／产品／变现\" class=\"headerlink\" title=\"技术／产品／变现\"></a>技术／产品／变现</h3><ul>\n<li>收益：小几十K／几天</li>\n<li>团队：3人</li>\n<li>项目所用工具／技术：Python</li>\n<li>总结：<ul>\n<li>1.初期：需求沟通：要求：明确需求及基本劳务报酬</li>\n<li>2.中期：<ul>\n<li>任务分配领取</li>\n<li>任务阶段监督</li>\n<li>任务阶段汇总</li>\n</ul>\n</li>\n<li>3.后期：<ul>\n<li>任务交付验收</li>\n<li>劳务报酬确定</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>1.书面材料等<strong>洽谈内容</strong>一定保留</li>\n<li>2.报酬材料等一定落实到具体<strong>截止日期</strong></li>\n</ul>\n</li>\n</ul>\n","categories":["生财有道"],"tags":[]},{"title":"机器学习案例分析一：微软网页搜索","url":"https://geekqi.github.io/2017/05/22/案例分析一：微软网页搜索/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"A-提高网页搜索结果的相关性\"><a href=\"#A-提高网页搜索结果的相关性\" class=\"headerlink\" title=\"A.提高网页搜索结果的相关性\"></a>A.提高网页搜索结果的相关性</h3><ul>\n<li>基本思想：<strong>快速实现的能力</strong>：<strong>快速处理</strong></li>\n<li>实现方法：Boosted Decision Trees</li>\n<li>方法可解决问题：<ul>\n<li>排序：置顶最相关网页</li>\n<li>分类：垃圾邮件分类</li>\n<li>回归分析：房价预估</li>\n</ul>\n</li>\n<li>研究／产品周期开发案例：<ul>\n<li>挑战：1.提出对的问题， 2.很好的验证</li>\n<li>解决方法：从实际问题出发</li>\n<li>发出请求：<ul>\n<li>高效扫描索引中所有文件，快速过滤器过滤。将候选文档数减少到可控规模</li>\n<li>对每个候选文档，生成几千个特征表示与查询内容的相关度<ul>\n<li>比如把特征列表映射到一个对查询相关的文档进行编码的分数</li>\n</ul>\n</li>\n<li>结合过滤处理，再排序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>总结：整体过程良性循环，工程和产品的需求推动研究的进展，而研究为产品开发提供了新的机遇</li>\n</ul>\n<p>参考自：</p>\n<ul>\n<li><a href=\"http://www.msra.cn/zh-cn/research/machine-learning-group/machine-learning-for-industry-a-case-study.aspx\" target=\"_blank\" rel=\"external\">微软搜索案例</a></li>\n</ul>\n","categories":["机器学习"],"tags":[]},{"title":"最大似然到EM","url":"https://geekqi.github.io/2017/05/21/最大似然到EM/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"A-最大似然\"><a href=\"#A-最大似然\" class=\"headerlink\" title=\"A.最大似然\"></a>A.最大似然</h3><ul>\n<li>问题：需要调查学校男生／女生身高分布</li>\n<li>要求：抽样后得到的似然函数最大<ul>\n<li>似然函数：给定输出x时，关于参数θ的似然函数L(θ|x)（在数值上）等于给定参数θ后变量X的概率：L(θ|x)=P(X=x|θ).</li>\n<li>求解最值：偏导／梯度</li>\n</ul>\n</li>\n<li>总结：根据结果反推使得该结果出现可能性最大的条件，作为估计值。</li>\n<li>步骤：<ul>\n<li>写出似然函数</li>\n<li>对似然函数取对数，并整理</li>\n<li>求导数，令为0，得到似然方程</li>\n<li>解似然方程，得到参数为所求。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"B-EM算法-Expectation-Maximization\"><a href=\"#B-EM算法-Expectation-Maximization\" class=\"headerlink\" title=\"B.EM算法(Expectation Maximization)\"></a>B.EM算法(Expectation Maximization)</h3><ul>\n<li>问题：同上</li>\n<li>解释：要估计A／B两个参数，如果知道A可以得到B，反过来知道B得到A。可以考虑先给A初值，得到B估计值，再从B出发，重新估计A值，直到收敛。 是一种从不完全数据／数据丢失(存在隐含变量)求解概率模型参数的最大似然估计方法。</li>\n<li>推导：<ul>\n<li>假设：样本集中m个独立样本。每个样本i对应的类别z(i)是未知的(相当于聚类)，也即隐含变量。</li>\n<li>目标：合适的θ和z让L(θ)最大</li>\n<li>转化：Jensen不等式</li>\n</ul>\n</li>\n<li>流程：<ul>\n<li>初始化分布参数θ</li>\n<li>重复以下步骤，直到收敛：<ul>\n<li>E：根据参数初始值／上一次迭代的模型参数来计算隐形变量的后验概率(期望)</li>\n<li>M：将似然函数最大化以获得最新的参数值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>应用：GMM混合高斯模型、聚类、HMM等</li>\n</ul>\n<p>参考自：</p>\n<ul>\n<li><a href=\"http://chuansong.me/n/306932251644\" target=\"_blank\" rel=\"external\">最大似然到EM</a></li>\n</ul>\n","categories":["未分类"],"tags":[]},{"title":"数据挖掘二.1：分类模型汇总","url":"https://geekqi.github.io/2017/05/21/数据挖掘二.1分类模型汇总/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<p>具体问题的分类参见<a href=\"https://geekqi.github.io/2017/05/20/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB%E6%B1%87%E6%80%BB/\">数据挖掘二：问题分类汇总</a></p>\n<h3 id=\"A-LogisticRegression模型简介\"><a href=\"#A-LogisticRegression模型简介\" class=\"headerlink\" title=\"A.LogisticRegression模型简介\"></a>A.LogisticRegression模型简介</h3><h4 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h4><ul>\n<li>适用情况：预测是否点击特定商品／判断用户性别／预测用户是否会购买给定的品类／判断评论是正面还是负面</li>\n<li>常用算法：逻辑回归／支持向量机<strong>「都属于有监督学习」</strong></li>\n<li>注意事项：模型效果往往与<strong>所用特征</strong>紧密相关</li>\n</ul>\n<h4 id=\"1-模型\"><a href=\"#1-模型\" class=\"headerlink\" title=\"1.模型\"></a>1.模型</h4><ul>\n<li>sigmoid函数</li>\n<li>决策函数<ul>\n<li>目的：机器学习模型就是将决策函数限定在某一组条件下， 这组条件决定了模型的假设空间。</li>\n<li>方式：y* = 1, if P(y=1| x) &gt; 0.5。如果对正例准确性要求高，阈值可大一些；对正例召回率要求高， 阈值可小</li>\n</ul>\n</li>\n<li>参数求解<ul>\n<li>目的：模型的数学形式确定了，剩下就是求参数</li>\n<li><strong>求解方式：最大似然估计／损失函数(0-1/log/hinge)</strong><ul>\n<li><strong>求解方式：梯度下降／共轭梯度下降／牛顿法／LBFGS等</strong></li>\n<li>原因：保证损失函数是减小的／LR的损失函数是凸函数，可保证局部最优也是全局最优。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>正则化<ul>\n<li>目的：控制模型复杂度， 防止过拟合</li>\n<li>方法：在优化目标中加入正则项， 通过惩罚过大参数防止过拟合<ul>\n<li>L1:使参数变为0，能产生稀疏解[由于数据维度高，使用较为广泛]／L2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-延伸\"><a href=\"#2-延伸\" class=\"headerlink\" title=\"2.延伸\"></a>2.延伸</h4><ul>\n<li>生成模型和判别模型<ul>\n<li>LR：判别模型：直接对条件概率P(y|x)建模， 不关心背后数据分布P(y|x)</li>\n<li>高斯贝叶斯(Gaussian Naive Bayes):生成模型：先对数据的联合分布建模， 再通过贝叶斯公式计算样本属于各个类别的后验概率</li>\n</ul>\n</li>\n<li>多分类(softmax)<ul>\n<li>解释：y 不是在0/1中取值，而是在K个类别中取值</li>\n<li>处理方法一：对每个类别训练一个二元分类器(One-vs-All)：当K个类别不是互斥的时候 ，比如用户会购买哪种品类，可用此方法。 </li>\n<li>处理方法二：Softmax回归：当K个类别互斥， 即y = i 不能取其他的值， 比如用户年龄段。：是直接对LR在多分类的推广(Multinomial Logistic Regression)。<ul>\n<li>求解方法：梯度下降／其他高阶方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-应用：美团如何用LR解决实际问题\"><a href=\"#3-应用：美团如何用LR解决实际问题\" class=\"headerlink\" title=\"3.应用：美团如何用LR解决实际问题\"></a>3.应用：美团如何用LR解决实际问题</h4><ul>\n<li>情况：预测未来是否购买：1/0。</li>\n<li>选用特征如下 <img src=\"/2017/05/21/数据挖掘二.1分类模型汇总/MeiTuan.png\" alt=\"MeiTuan\"><ul>\n<li>其中：特征跨度30天，标签2天。训练数据7千万量级。</li>\n</ul>\n</li>\n<li>处理过程：<ul>\n<li>品类聚合：人工把相似的小品类聚合起来：18个较为典型的品类集合</li>\n<li>构建训练集：如果用户给定时间购买某一品类集合， 作为正例</li>\n<li>LR训练：有了训练集，用Spark的LR算法对每个品类训练一个二分类模型，迭代100次40分钟。每个模型2分钟。测试集AUC也0.8以上。</li>\n<li>训练结果：训练好模型会保留下来， 用于预测各个品类上购买概率。 预测结果会用于推荐等场景。</li>\n<li>实际转化：由于不同品类间正负例分布不同。尝试不同采样方法。最终目标：提高下单率等线上指标。经过一些参数调优，品类偏好特征为推荐和排序带来超过1%的下单率提升</li>\n<li>心得：由于LR模型简单高效， 易于实现，可为后续模型优化提供不错baseline， 在排序等服务中也使用了LR模型。</li>\n</ul>\n</li>\n<li>适用情况：微博用户情感分析、用户对理财产品偏好性分析。 比如：通过微博分析用户情感属于喜怒哀乐等哪类， 将理财产品的用户群体分为偏好型／温和型／厌恶型</li>\n<li>判断方法：标签y有多维：每一维代表一个标签， 取值只有两个， 比如0-1。 或者， y只有一维， 取值有多个。</li>\n</ul>\n<h4 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h4><ul>\n<li>LR的数学模型和求解相对简洁。通过对特征离散化和其他映射，逻辑回归可处理非线性问题， 是强大分类器。</li>\n<li>在实际应用中， 拿到许多低层次的特征时， 可考虑LR解决问题</li>\n</ul>\n<p>参考自：</p>\n<ul>\n<li><a href=\"http://chuansong.me/n/306932351665\" target=\"_blank\" rel=\"external\">美团技术团队LR模型简介</a></li>\n</ul>\n","categories":["数据挖掘"],"tags":[]},{"title":"主要目标判断","url":"https://geekqi.github.io/2017/05/21/主要目标判断/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"1-刷题\"><a href=\"#1-刷题\" class=\"headerlink\" title=\"1.刷题\"></a>1.刷题</h3><ul>\n<li>目的分析：基础知识的掌握牢固， 「 <strong>基础熟练决定你的灵活性！」</strong></li>\n<li>解决办法：大量做题，<strong>「 不比别人熟练，必败」</strong></li>\n<li>可能结果：</li>\n<li>可能方式：<strong><a href=\"https://www.nowcoder.com/7037691\" target=\"_blank\" rel=\"external\">纽克</a>、<a href=\"https://www.julyedu.com\" target=\"_blank\" rel=\"external\">柒越</a></strong></li>\n</ul>\n<h3 id=\"2-简历\"><a href=\"#2-简历\" class=\"headerlink\" title=\"2.简历\"></a>2.简历</h3><ul>\n<li>目的分析：让人接受你的努力， <strong>「 被认可，被膜拜，这是主流！」</strong></li>\n<li>解决办法：</li>\n<li>可能结果：</li>\n<li>可能方式：</li>\n<li>时间节点：<strong>6月底</strong></li>\n</ul>\n<h3 id=\"3-经验\"><a href=\"#3-经验\" class=\"headerlink\" title=\"3.经验\"></a>3.经验</h3><ul>\n<li>目的分析：系统性质的项目过程， <strong>「 灵活的经验才能被主流朝拜！」</strong></li>\n<li>解决办法：<strong>实战</strong>项目、开源项目， <strong>「 片段化不系统，机会抓不住」</strong></li>\n<li>可能结果：</li>\n<li>可能方式：<strong><a href=\"http://geek.ai100.com.cn\" target=\"_blank\" rel=\"external\">豪洞悉</a>、<a href=\"http://tinyletter.com/fly51fly/archive\" target=\"_blank\" rel=\"external\">艾科科</a>、工种薅</strong></li>\n</ul>\n","categories":["主要目标判断"],"tags":[]},{"title":"「进攻」是最好的「防御」","url":"https://geekqi.github.io/2017/05/21/进攻是最好的防御/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]        </p>\n<p>​    </p>\n<h2 id=\"「进攻」是最好的「防御」\"><a href=\"#「进攻」是最好的「防御」\" class=\"headerlink\" title=\"「进攻」是最好的「防御」\"></a><strong>「进攻」是最好的「防御」</strong></h2><p>​                                                                                                                   不可胜，守；可胜，攻也；  </p>\n<h3 id=\"A-学术论文／研究项目／工程项目／创业项目\"><a href=\"#A-学术论文／研究项目／工程项目／创业项目\" class=\"headerlink\" title=\"A.学术论文／研究项目／工程项目／创业项目\"></a><strong>A.学术论文／研究项目／工程项目／创业项目</strong></h3><ul>\n<li><a href=\"http://www.runoob.com/python/python-tutorial.html\" target=\"_blank\" rel=\"external\">python基础 - get！</a></li>\n<li><a href=\"http://www.runoob.com/sql/sql-tutorial.html\" target=\"_blank\" rel=\"external\">sql基础 - get!</a></li>\n</ul>\n<p>### </p>\n<hr>\n<p>关于基础知识：如下：</p>\n<h4 id=\"1-刷题\"><a href=\"#1-刷题\" class=\"headerlink\" title=\"1.刷题\"></a>1.刷题</h4><ul>\n<li>目的分析：基础知识的掌握牢固， 「 <strong>基础熟练决定你的灵活性！」</strong></li>\n<li>解决办法：大量做题，<strong>「 不比别人熟练，必败」</strong></li>\n<li>可能方式：<strong><a href=\"https://www.nowcoder.com/7037691\" target=\"_blank\" rel=\"external\">纽克</a>、<a href=\"https://www.julyedu.com\" target=\"_blank\" rel=\"external\">柒越</a></strong></li>\n</ul>\n<h4 id=\"2-简历\"><a href=\"#2-简历\" class=\"headerlink\" title=\"2.简历\"></a>2.简历</h4><ul>\n<li>目的分析：让人接受你的努力， <strong>「 被认可，被膜拜，这是主流！」</strong></li>\n<li>时间节点：<strong>6月底</strong></li>\n</ul>\n<h4 id=\"3-经验\"><a href=\"#3-经验\" class=\"headerlink\" title=\"3.经验\"></a>3.经验</h4><ul>\n<li>目的分析：系统性质的项目过程， <strong>「 灵活的经验才能被主流朝拜！」</strong></li>\n<li>解决办法：<strong>实战</strong>项目、开源项目， <strong>「 片段化不系统，机会抓不住」</strong></li>\n<li>可能方式：<strong><a href=\"http://geek.ai100.com.cn\" target=\"_blank\" rel=\"external\">豪洞悉</a>、<a href=\"http://tinyletter.com/fly51fly/archive\" target=\"_blank\" rel=\"external\">艾科科</a>、工种薅</strong>、<strong>英语</strong></li>\n</ul>\n","categories":["主要目标判断"],"tags":[]},{"title":"数据挖掘一：误区汇总","url":"https://geekqi.github.io/2017/05/20/数据挖掘一-误区汇总/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"1-过于注重训练\"><a href=\"#1-过于注重训练\" class=\"headerlink\" title=\"1.过于注重训练\"></a>1.过于注重训练</h3><ul>\n<li>误区分析：没有实战训练，封闭式训练 。只有样本外的模型评分结果才有用！</li>\n<li>解决办法：重抽样：bootstrap、cross-validation、jackknife、leave-one-out…等等。</li>\n</ul>\n<h3 id=\"2-只依赖一种技术\"><a href=\"#2-只依赖一种技术\" class=\"headerlink\" title=\"2.只依赖一种技术\"></a>2.只依赖一种技术</h3><ul>\n<li>误区分析：没有对比就没有好坏， 辩证法的思想</li>\n<li>解决办法：至少和传统：线性回归／线性判别分析做个比较。 使用一系列好的工具和方法。 每种带来最多5%～10%的改进。</li>\n</ul>\n<h3 id=\"3-关注错的目标\"><a href=\"#3-关注错的目标\" class=\"headerlink\" title=\"3.关注错的目标\"></a>3.关注错的目标</h3><ul>\n<li>误区分析：分类算法用分类精度衡量， 但实际几乎不看，因为不是关注的目标</li>\n<li>解决办法：项目目标[比如欺诈电话分析， 重点不是分类，而是如何描述正常的特征，然后据此发现异常]／模型目标[计算机如何改善业务， 不仅仅模型计算精度]</li>\n</ul>\n<h3 id=\"4-过度依赖数据\"><a href=\"#4-过度依赖数据\" class=\"headerlink\" title=\"4.过度依赖数据\"></a>4.过度依赖数据</h3><ul>\n<li>误区分析：如果数据+工具可以解决，要人干什么。[兼听则明， 偏听则暗]</li>\n<li>解决办法：对数据处理结果分析</li>\n</ul>\n<h3 id=\"5-抽样有问题\"><a href=\"#5-抽样有问题\" class=\"headerlink\" title=\"5.抽样有问题\"></a>5.抽样有问题</h3><ul>\n<li>误区分析：没有保证抽样的随机性， 人为提高原始数据的权重</li>\n<li>解决办法：注意随机性，以及模型的现实可靠性。</li>\n</ul>\n<ul>\n<li>处理方法：scikit-learn的LabelBinarizer()和OneHotEncoder()。pandas的get_dummies()。等</li>\n</ul>\n","categories":["数据挖掘"],"tags":[]},{"title":"数据挖掘三：数据集划分","url":"https://geekqi.github.io/2017/05/20/数据挖掘三-数据集划分/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<p>数据集划分：训练集／验证集。 或者还需要划分出测试集</p>\n<p>目的：先用训练集／验证集的交叉验证来寻找模型的最优超参数， 模型调优完毕后， 最终用测试集来评估模型的最终效果。</p>\n<h3 id=\"A-分类问题：\"><a href=\"#A-分类问题：\" class=\"headerlink\" title=\"A.分类问题：\"></a>A.分类问题：</h3><ul>\n<li>划分原则：根据标签划分数据集。比如：每种标签采样多少， 保证训练集和验证集的样本标签分布接近。 </li>\n<li>划分方法：随机采样／分层采样[K折交叉验证]。 可以根据实际业务问题选择合适的采样方式</li>\n</ul>\n<h3 id=\"B-回归问题\"><a href=\"#B-回归问题\" class=\"headerlink\" title=\"B.回归问题\"></a>B.回归问题</h3><ul>\n<li>划分原则：不逊在分类中标签分布不均匀情况。</li>\n<li>划分方法：K折交叉验证</li>\n</ul>\n<blockquote>\n<p>交叉验证</p>\n</blockquote>\n<ul>\n<li>目的：寻找最优的超参数</li>\n<li>方法：sklearn 中的KFold ，train_test_split， metric.score, GridSearchCV等</li>\n</ul>\n<p>参考自：</p>\n<ul>\n<li><a href=\"http://www.cbdio.com/BigData/2016-08/16/content_5187960.htm\" target=\"_blank\" rel=\"external\">举例</a></li>\n</ul>\n","categories":["数据挖掘"],"tags":[]},{"title":"数据挖掘二：问题分类汇总","url":"https://geekqi.github.io/2017/05/20/数据挖掘二-问题分类汇总/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"A-分类问题：\"><a href=\"#A-分类问题：\" class=\"headerlink\" title=\"A.分类问题：\"></a>A.分类问题：</h3><h4 id=\"1-二分类问题\"><a href=\"#1-二分类问题\" class=\"headerlink\" title=\"1.二分类问题\"></a>1.二分类问题</h4><ul>\n<li>适用情况：工业界：广告点击率预估、推荐系统购买行为预测。比如：预测广告是否会被用户点击， 用户是否会购买某种商品</li>\n<li>判断方法：标签y只有一维：取值只有两个， 比如0-1。</li>\n</ul>\n<h4 id=\"2-多分类问题\"><a href=\"#2-多分类问题\" class=\"headerlink\" title=\"2.多分类问题\"></a>2.多分类问题</h4><ul>\n<li>适用情况：微博用户情感分析、用户对理财产品偏好性分析。 比如：通过微博分析用户情感属于喜怒哀乐等哪类， 将理财产品的用户群体分为偏好型／温和型／厌恶型</li>\n<li>判断方法：标签y有多维：每一维代表一个标签， 取值只有两个， 比如0-1。 或者， y只有一维， 取值有多个。</li>\n</ul>\n<h4 id=\"3-多标签问题\"><a href=\"#3-多标签问题\" class=\"headerlink\" title=\"3.多标签问题\"></a>3.多标签问题</h4><ul>\n<li>适用情况：音乐的标签划分。 比如：标签集合：{独奏，协奏，浪漫主义，印象主义}，「月光」属于{独奏，印象主义}，「保卫黄河」属于{协奏}。</li>\n<li>判断方法：标签y有多维， 与多分类不同在于： 本本可以同时属于多个标签。 </li>\n</ul>\n<h3 id=\"B-回归问题\"><a href=\"#B-回归问题\" class=\"headerlink\" title=\"B.回归问题\"></a>B.回归问题</h3><h4 id=\"1-单回归问题\"><a href=\"#1-单回归问题\" class=\"headerlink\" title=\"1.单回归问题\"></a>1.单回归问题</h4><ul>\n<li>适用情况：比如：股价预测</li>\n<li>判断方法：y只有一维， 取值为连续值。</li>\n</ul>\n<h4 id=\"2-多回归问题\"><a href=\"#2-多回归问题\" class=\"headerlink\" title=\"2.多回归问题\"></a>2.多回归问题</h4><ul>\n<li>适用情况：比如：天气预报：气温、湿度、降雨量</li>\n<li>判断方法：y有多维， 取值为连续值</li>\n</ul>\n<p>参考自：</p>\n<ul>\n<li><a href=\"http://www.cbdio.com/BigData/2016-08/16/content_5187960.htm\" target=\"_blank\" rel=\"external\">举例</a> </li>\n<li><a href=\"http://www.cbdio.com/BigData/2016-08/31/content_5227769.htm\" target=\"_blank\" rel=\"external\">举例</a></li>\n</ul>\n","categories":["数据挖掘"],"tags":[]},{"title":"Hello Change, YangQi","url":"https://geekqi.github.io/2017/05/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":["Blog"],"tags":[]},{"title":"数据挖掘四：特征处理方法汇总","url":"https://geekqi.github.io/2017/05/19/数据挖掘四-特征处理方法汇总/","content":"<p>注：为个人学习总结需要，如有侵权，请您指出。[持续更新， 如有错误，请您指出]</p>\n<h3 id=\"1-类别变量处理\"><a href=\"#1-类别变量处理\" class=\"headerlink\" title=\"1.类别变量处理\"></a>1.类别变量处理</h3><ul>\n<li>处理原则：先标签化， 再二值化编码。 </li>\n<li>处理目的：标签化：将字段的原始值(字符串／不连续数字等)转化成连续的整数值， 再将整数值二值化编码。 如果原始值是整数， 则直接二值化即可。</li>\n<li>处理情况：不同颜色， 不同国家</li>\n<li>处理方法：scikit-learn的LabelBinarizer()和OneHotEncoder()。pandas的<strong>DataFrameMapper</strong>，get_dummies()。DataFrameMapper结合 sklearn 的Transformer类，来进行列变换。等</li>\n</ul>\n<h3 id=\"2-数值变量处理\"><a href=\"#2-数值变量处理\" class=\"headerlink\" title=\"2.数值变量处理\"></a>2.数值变量处理</h3><ul>\n<li>处理原则：只需正规化和标准化</li>\n<li>处理目的：最好也进行离散化</li>\n<li>处理情况：不同尺寸， 不同数值大小</li>\n<li>处理方法：pandas：map()。 scikit-learn的Normalizer和StandardScaler</li>\n</ul>\n<h3 id=\"3-文本变量处理\"><a href=\"#3-文本变量处理\" class=\"headerlink\" title=\"3.文本变量处理\"></a>3.文本变量处理</h3><ul>\n<li>处理原则：词频， n-gram，TF-IDF[减小停用词权重]</li>\n<li>处理目的：</li>\n<li>处理情况：用户评论／新闻摘要／视频弹幕等</li>\n<li>处理方法：scikit-learn的corpus和CountVectorizer和CountVectorizer(ngram_range=(1, 2))和TfidfVectorizer</li>\n</ul>\n<h3 id=\"4-缺失值处理\"><a href=\"#4-缺失值处理\" class=\"headerlink\" title=\"4.缺失值处理\"></a>4.缺失值处理</h3><ul>\n<li>处理原则：</li>\n<li>处理目的：</li>\n<li>处理方法：填充／丢弃／看作新类别</li>\n</ul>\n<h3 id=\"5-长尾特征处理\"><a href=\"#5-长尾特征处理\" class=\"headerlink\" title=\"5.长尾特征处理\"></a>5.长尾特征处理</h3><p>常见于数值类型的变量</p>\n<ul>\n<li>处理原则：</li>\n<li>处理目的：将变量的分布相对均衡</li>\n<li>处理方法：log(x+1)处理</li>\n</ul>\n<h3 id=\"处理方法比较：\"><a href=\"#处理方法比较：\" class=\"headerlink\" title=\"处理方法比较： \"></a>处理方法比较： <img src=\"/2017/05/19/数据挖掘四-特征处理方法汇总/Feature.png\" alt=\"Feature\"></h3><p>参考自：</p>\n<ul>\n<li><a href=\"http://www.cbdio.com/BigData/2016-08/16/content_5187960.htm\" target=\"_blank\" rel=\"external\">举例</a></li>\n<li><a href=\"http://www.cbdio.com/BigData/2016-08/31/content_5227769.htm\" target=\"_blank\" rel=\"external\">举例</a></li>\n<li><a href=\"http://blog.csdn.net/lujiandong1/article/details/52836051\" target=\"_blank\" rel=\"external\">举例</a></li>\n</ul>\n","categories":["数据挖掘"],"tags":[]},{"title":"about","url":"https://geekqi.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://geekqi.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://geekqi.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://geekqi.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://geekqi.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://geekqi.github.io/tag/index.html","content":"","categories":[],"tags":[]}]